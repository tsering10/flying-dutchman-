{"changed":true,"filter":false,"title":"orderService","tooltip":"/servicers/orderService","value":"/**\n * Brix Repository\n */\nvar Brix = db.Brix;\nvar Q = require('q');\nvar logger =  require('../logger.js'),log = new logger();\n\nfunction BrixRepository() {\n\tthis.findBrixes = findBrixes;\n\tthis.createBrix = createBrix;\n\tthis.updateBrix = updateBrix;\n\tthis.findCombinedBrixes = findCombinedBrixes;\n\t\n}\n\nfunction updateBrix(wineId, brixId, brixtoupdate,createdby) {\nvar deferred = Q.defer();\n\n\nBrix.find({\n\t  where: {id:brixId,wineid:wineId}\n\t}).success(function(brix) {\n\t if(brix)\n\t {\t \n\t\t brix.updateAttributes({\n\t\t\t gallonsadded:brixtoupdate.gallonsadded,\n\t\t\t adjustedto:brixtoupdate.adjustedto,\n\t\t\t performedby:createdby\n\t\t\t}).success(function(brixupdated) \n\t\t\t\t\t{\n\t\t\t\t      deferred.resolve(brixupdated);\n\t\t\t\t\t})\n\t\t\t  .error(function(err) {\n\t\t\t\t  deferred.reject(new Error(err));\n             });\n\t }\n\t else\n\t\t deferred.reject(new Error(\"Brix Id\" + brixId +  \" not found for update.\"));\n\t \n\t}).error(function(err) {\n\t\tdeferred.reject(new Error(err));\n  });\n\n\nreturn deferred.promise;\n}\n\nfunction findCombinedBrixes(wineId) {\n    var deferred = Q.defer();\n\t\n\t\n    db.sequelize.query('select wineid,gallonsadded,dateperformed ,value  from \"Brixes\" where wineid = ? '+\n    \t\t' union (select wineid,0 as gallonsadded,datelogged as dateperformed ,brixreading as value ' +\n    \t\t' from \"FermentationProgresses\" where wineid = ?)' \n             , null, {raw: true}, [ wineId,wineId])\n       .success(function (brixesc) {\n    \t\n    \tif (brixesc) {\n            // return all brixes\n            deferred.resolve(brixesc);\n        } else {\n            // no brixes yet\n        \t deferred.resolve({});\n        }\n    \t\n       });\n\t\n\t\n\treturn deferred.promise;\n}\n\nfunction findBrixes(wineId) {\n    var deferred = Q.defer();\n\t\n\t\n    Brix.findAll({ where: { wineid: wineId } }).success(function(brixes) {\n\t\tdeferred.resolve(brixes);\n\n    }).error(function(err) {\n    \tdeferred.reject(new Error(err));\n        });\n\t\n\t\n\treturn deferred.promise;\n}\n\n\nfunction createBrix(wineId,\tgallonsadded ,\n\t\tvalue,adjustedto, dateperformed,createdby)\n{\n\t\tvar deferred = Q.defer();\n\t\n\t\tBrix\n\t\t.build({ wineid:wineId,  gallonsadded:gallonsadded, \n\t\t\tvalue:value,adjustedto:adjustedto,dateperformed:dateperformed,performedby:createdby\n\t\t\t\t})\n      .save()\n      .success(function(brix){\n    \t  deferred.resolve(brix);\n\t  \n       }).error(function(error){\n    \t   deferred.reject(new Error(error));\n       });\n\t\n\treturn deferred.promise;\n}\n\n\nmodule.exports = BrixRepository;","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":108,"column":32},"action":"insert","lines":["/**"," * Brix Repository"," */","var Brix = db.Brix;","var Q = require('q');","var logger =  require('../logger.js'),log = new logger();","","function BrixRepository() {","\tthis.findBrixes = findBrixes;","\tthis.createBrix = createBrix;","\tthis.updateBrix = updateBrix;","\tthis.findCombinedBrixes = findCombinedBrixes;","\t","}","","function updateBrix(wineId, brixId, brixtoupdate,createdby) {","var deferred = Q.defer();","","","Brix.find({","\t  where: {id:brixId,wineid:wineId}","\t}).success(function(brix) {","\t if(brix)","\t {\t ","\t\t brix.updateAttributes({","\t\t\t gallonsadded:brixtoupdate.gallonsadded,","\t\t\t adjustedto:brixtoupdate.adjustedto,","\t\t\t performedby:createdby","\t\t\t}).success(function(brixupdated) ","\t\t\t\t\t{","\t\t\t\t      deferred.resolve(brixupdated);","\t\t\t\t\t})","\t\t\t  .error(function(err) {","\t\t\t\t  deferred.reject(new Error(err));","             });","\t }","\t else","\t\t deferred.reject(new Error(\"Brix Id\" + brixId +  \" not found for update.\"));","\t ","\t}).error(function(err) {","\t\tdeferred.reject(new Error(err));","  });","","","return deferred.promise;","}","","function findCombinedBrixes(wineId) {","    var deferred = Q.defer();","\t","\t","    db.sequelize.query('select wineid,gallonsadded,dateperformed ,value  from \"Brixes\" where wineid = ? '+","    \t\t' union (select wineid,0 as gallonsadded,datelogged as dateperformed ,brixreading as value ' +","    \t\t' from \"FermentationProgresses\" where wineid = ?)' ","             , null, {raw: true}, [ wineId,wineId])","       .success(function (brixesc) {","    \t","    \tif (brixesc) {","            // return all brixes","            deferred.resolve(brixesc);","        } else {","            // no brixes yet","        \t deferred.resolve({});","        }","    \t","       });","\t","\t","\treturn deferred.promise;","}","","function findBrixes(wineId) {","    var deferred = Q.defer();","\t","\t","    Brix.findAll({ where: { wineid: wineId } }).success(function(brixes) {","\t\tdeferred.resolve(brixes);","","    }).error(function(err) {","    \tdeferred.reject(new Error(err));","        });","\t","\t","\treturn deferred.promise;","}","","","function createBrix(wineId,\tgallonsadded ,","\t\tvalue,adjustedto, dateperformed,createdby)","{","\t\tvar deferred = Q.defer();","\t","\t\tBrix","\t\t.build({ wineid:wineId,  gallonsadded:gallonsadded, ","\t\t\tvalue:value,adjustedto:adjustedto,dateperformed:dateperformed,performedby:createdby","\t\t\t\t})","      .save()","      .success(function(brix){","    \t  deferred.resolve(brix);","\t  ","       }).error(function(error){","    \t   deferred.reject(new Error(error));","       });","\t","\treturn deferred.promise;","}","","","module.exports = BrixRepository;"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":101,"column":25},"end":{"row":101,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1424366981220}