{"changed":true,"filter":false,"title":"undo.js","tooltip":"/public/js/undo.js","value":"\n(function() {\n\n// based on Backbone.js' inherits\n    var ctor = function(){};\n    var inherits = function(parent, protoProps) {\n        var child;\n\n        if (protoProps && protoProps.hasOwnProperty('constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function(){ return parent.apply(this, arguments); };\n        }\n\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n\n        if (protoProps) extend(child.prototype, protoProps);\n\n        child.prototype.constructor = child;\n        child.__super__ = parent.prototype;\n        return child;\n    };\n\n    function extend(target, ref) {\n        for ( name in ref ) {\n            var value = ref[name];\n            if (value !== undefined) {\n                target[ name ] = value;\n            }\n        }\n        return target;\n    };\n\n    var Undo;\n    if (typeof exports !== 'undefined') {\n        Undo = exports;\n    } else {\n        Undo = this.Undo = {};\n    }\n\n    Undo.Stack = function() {\n        this.commands = [];\n        this.stackPosition = -1;\n        this.savePosition = -1;\n    };\n\n    extend(Undo.Stack.prototype, {\n        execute: function(command) {\n            this._clearRedo();\n            command.execute();\n            this.commands.push(command);\n            this.stackPosition++;\n            this.changed();\n        },\n        undo: function() {\n            this.commands[this.stackPosition].undo();\n            this.stackPosition--;\n            this.changed();\n        },\n        canUndo: function() {\n            return this.stackPosition >= 0;\n        },\n        redo: function() {\n            this.stackPosition++;\n            this.commands[this.stackPosition].redo();\n            this.changed();\n        },\n        canRedo: function() {\n            return this.stackPosition < this.commands.length - 1;\n        },\n        save: function() {\n            this.savePosition = this.stackPosition;\n            this.changed();\n        },\n        dirty: function() {\n            return this.stackPosition != this.savePosition;\n        },\n        _clearRedo: function() {\n            // TODO there's probably a more efficient way for this\n            this.commands = this.commands.slice(0, this.stackPosition + 1);\n        },\n        changed: function() {\n            // do nothing, override\n        }\n    });\n\n    Undo.Command = function(name) {\n        this.name = name;\n    }\n\n    var up = new Error(\"override me!\");\n\n    extend(Undo.Command.prototype, {\n        execute: function() {\n            throw up;\n        },\n        undo: function() {\n            throw up;\n        },\n        redo: function() {\n            this.execute();\n        }\n    });\n\n    Undo.Command.extend = function(protoProps) {\n        var child = inherits(this, protoProps);\n        child.extend = Undo.Command.extend;\n        return child;\n    };\n\n}).call(this);","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":10,"column":3},"action":"remove","lines":["/**"," * Created by ajijohn on 3/16/15."," */","/*"," * Undo.js - A undo/redo framework for JavaScript"," *"," * http://jzaefferer.github.com/undo"," *"," * Copyright (c) 2011 JÃ¶rn Zaefferer"," * MIT licensed."," */"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1426545523000}